{"mappings":"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","sources":["app.js"],"sourcesContent":["// Création de la classe Form\nclass Form {\n  // Propriété privée #fields qui contient un tableau d’instances de la classe Field\n  #fields = [];\n  // Propriété privée #formElement qui est un objet HTMLFormElement représentant le formulaire\n  #formElement = document.createElement(\"form\");\n\n  // Constructeur de la classe Form avec un paramètre 'title'\n  constructor(title) {\n    // Propriété 'title' du formulaire\n    this.title = title;\n  }\n\n  // Méthode pour ajouter une instance de Field au tableau #fields\n  addField(field) {\n    // Vérification si 'field' est une instance de la classe Field\n    if (!(field instanceof Field)) {\n      throw new Error(\"You tried to add something that is not a field\");\n    }\n    // Ajout de 'field' au tableau #fields\n    this.#fields.push(field);\n    // Affichage d'un message dans la console\n    console.log(`Added field ${field.name} to form`);\n    // Permet l'enchaînement des méthodes\n    return this;\n  }\n\n  // Méthode pour créer, afficher, insérer dans le DOM et traiter les événements liés au formulaire\n  render() {\n    // Création d'un élément <h1> avec le contenu du titre du formulaire\n    const titleElement = document.createElement(\"h1\");\n    titleElement.textContent = this.title;\n    // Ajout de l'élément <h1> au formulaire\n    this.#formElement.append(titleElement);\n\n    // Pour chaque instance de Field dans le tableau #fields, génération des éléments HTML correspondants\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render();\n      // Ajout des éléments générés au formulaire\n      this.#formElement.append(fieldElement);\n    });\n\n    // Création d'un bouton de type \"submit\" et ajout au formulaire\n    const buttonElement = document.createElement(\"button\");\n    buttonElement.type = \"submit\";\n    buttonElement.textContent = \"Submit\";\n    this.#formElement.append(buttonElement);\n\n    // Ajout d'un écouteur d'événement sur le formulaire pour l'événement \"submit\"\n    // et liaison de la méthode #submit à l'événement tout en maintenant le contexte de la classe (this)\n    this.#formElement.addEventListener(\"submit\", this.#submit.bind(this));\n\n    // Ajout du formulaire complet au DOM (dans le corps du document)\n    document.body.append(this.#formElement);\n  }\n\n  // Méthode privée #submit, callback de l'événement \"submit\" du formulaire\n  #submit(e) {\n    // Empêcher le rechargement de la page lors de la soumission du formulaire\n    e.preventDefault();\n\n    // Collecte des valeurs des champs du formulaire dans un tableau d'objets\n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Recherche de l'élément toast dans le DOM et ajout de la classe \"show\" pour l'afficher\n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Définition du texte de l'élément toast comme une représentation JSON de formData\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Attente de 5 secondes, puis suppression de la classe \"show\" de l'élément toast pour le cacher\n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    // Retourne formData\n    return formData;\n  }\n}\n\n// Création de la classe Field\nclass Field {\n  // Propriété privée #inputElement qui est un objet HTMLInputElement représentant le champ\n  #inputElement = document.createElement(\"input\");\n\n  // Constructeur de la classe Field avec un objet 'options' contenant 'name', 'type' et 'label'\n  constructor(options) {\n    // Propriétés d'instance name, type et label\n    this.name = options.name;\n    this.type = options.type;\n    this.label = options.label;\n  }\n\n  // Méthode pour créer les éléments HTML propres à un champ et les retourner\n  render() {\n    // Création d'un élément <div> avec la classe \"field-container\"\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    // Création d'un élément <label> avec le texte du label de l'instance\n    const labelElement = document.createElement(\"label\");\n    labelElement.innerText = this.label;\n\n    // Attribution des propriétés name et type à l'objet #inputElement\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    // Ajout des éléments <label> et <input> au <div>\n    fieldContainer.append(labelElement);\n    fieldContainer.append(this.#inputElement);\n\n    // Retourne le <div> contenant les éléments du champ\n    return fieldContainer;\n  }\n\n  // Getter pour la propriété value de l'objet #inputElement\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n\n// Création d'une instance de la classe Form avec le titre \"Signup\"\nconst form = new Form(\"Signup\");\n\n// Création d'instances de la classe Field avec différentes configurations\nconst email = new Field({\n  name: \"email\",\n  type: \"email\",\n  label: \"email\"\n});\n\nconst password = new Field({\n  name: \"password\",\n  type: \"password\",\n  label: \"password\"\n});\n\n// Ajout des champs au formulaire et appel de la méthode render pour afficher le formulaire dans le DOM\nform.addField(email).addField(password).render();\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}