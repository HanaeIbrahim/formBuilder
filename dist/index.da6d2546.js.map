{"mappings":"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","sources":["<anon>","app.js","node_modules/@swc/helpers/esm/_class_private_field_get.js","node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js","node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js","node_modules/@swc/helpers/esm/_class_private_field_init.js","node_modules/@swc/helpers/esm/_check_private_redeclaration.js","node_modules/@swc/helpers/esm/_class_private_method_get.js","node_modules/@swc/helpers/esm/_class_private_method_init.js"],"sourcesContent":["// Création de la classe Form\nfunction $abc4318bf70a72b2$export$184ff5d81c0e5775(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n    return descriptor.value;\n}\n\n\nfunction $b70f889ed646504e$export$20c20a422940e173(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n    return privateMap.get(receiver);\n}\n\n\nfunction $5c80af232c750ab2$export$5a67b255b80ee4f2(receiver, privateMap) {\n    var descriptor = (0, $b70f889ed646504e$export$20c20a422940e173)(receiver, privateMap, \"get\");\n    return (0, $abc4318bf70a72b2$export$184ff5d81c0e5775)(receiver, descriptor);\n}\n\n\nfunction $790fb9fc00091f9b$export$6b10452b5ac97eba(obj, privateCollection) {\n    if (privateCollection.has(obj)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\n\n\nfunction $308c5c0430b3b5af$export$e235798705076415(obj, privateMap, value) {\n    (0, $790fb9fc00091f9b$export$6b10452b5ac97eba)(obj, privateMap);\n    privateMap.set(obj, value);\n}\n\n\nfunction $5697cdb8bd394f0e$export$ccedaf978f62b9dd(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n    return fn;\n}\n\n\n\nfunction $57141a884d78729a$export$1002c20f28174dbf(obj, privateSet) {\n    (0, $790fb9fc00091f9b$export$6b10452b5ac97eba)(obj, privateSet);\n    privateSet.add(obj);\n}\n\n\nvar // Propriété privée #fields qui contient un tableau d’instances de la classe Field\n$00b6969b118ecdd2$var$_fields = /*#__PURE__*/ new WeakMap(), // Propriété privée #formElement qui est un objet HTMLFormElement représentant le formulaire\n$00b6969b118ecdd2$var$_formElement = /*#__PURE__*/ new WeakMap(), // Méthode privée #submit, callback de l'événement \"submit\" du formulaire\n$00b6969b118ecdd2$var$_submit = /*#__PURE__*/ new WeakSet();\nclass $00b6969b118ecdd2$var$Form {\n    // Méthode pour ajouter une instance de Field au tableau #fields\n    addField(field) {\n        // Vérification si 'field' est une instance de la classe Field\n        if (!(field instanceof $00b6969b118ecdd2$var$Field)) throw new Error(\"You tried to add something that is not a field\");\n        // Ajout de 'field' au tableau #fields\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_fields).push(field);\n        // Affichage d'un message dans la console\n        console.log(`Added field ${field.name} to form`);\n        // Permet l'enchaînement des méthodes\n        return this;\n    }\n    // Méthode pour créer, afficher, insérer dans le DOM et traiter les événements liés au formulaire\n    render() {\n        // Création d'un élément <h1> avec le contenu du titre du formulaire\n        const titleElement = document.createElement(\"h1\");\n        titleElement.textContent = this.title;\n        // Ajout de l'élément <h1> au formulaire\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_formElement).append(titleElement);\n        // Pour chaque instance de Field dans le tableau #fields, génération des éléments HTML correspondants\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_fields).forEach((field)=>{\n            const fieldElement = field.render();\n            // Ajout des éléments générés au formulaire\n            (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_formElement).append(fieldElement);\n        });\n        // Création d'un bouton de type \"submit\" et ajout au formulaire\n        const buttonElement = document.createElement(\"button\");\n        buttonElement.type = \"submit\";\n        buttonElement.textContent = \"Submit\";\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_formElement).append(buttonElement);\n        // Ajout d'un écouteur d'événement sur le formulaire pour l'événement \"submit\"\n        // et liaison de la méthode #submit à l'événement tout en maintenant le contexte de la classe (this)\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_formElement).addEventListener(\"submit\", (0, $5697cdb8bd394f0e$export$ccedaf978f62b9dd)(this, $00b6969b118ecdd2$var$_submit, $00b6969b118ecdd2$var$submit).bind(this));\n        // Ajout du formulaire complet au DOM (dans le corps du document)\n        document.body.append((0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_formElement));\n    }\n    // Constructeur de la classe Form avec un paramètre 'title'\n    constructor(title){\n        (0, $57141a884d78729a$export$1002c20f28174dbf)(this, $00b6969b118ecdd2$var$_submit);\n        (0, $308c5c0430b3b5af$export$e235798705076415)(this, $00b6969b118ecdd2$var$_fields, {\n            writable: true,\n            value: []\n        });\n        (0, $308c5c0430b3b5af$export$e235798705076415)(this, $00b6969b118ecdd2$var$_formElement, {\n            writable: true,\n            value: document.createElement(\"form\")\n        });\n        // Propriété 'title' du formulaire\n        this.title = title;\n    }\n}\nfunction $00b6969b118ecdd2$var$submit(e) {\n    // Empêcher le rechargement de la page lors de la soumission du formulaire\n    e.preventDefault();\n    // Collecte des valeurs des champs du formulaire dans un tableau d'objets\n    const formData = (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_fields).map((field)=>{\n        return {\n            [field.name]: field.value\n        };\n    });\n    // Recherche de l'élément toast dans le DOM et ajout de la classe \"show\" pour l'afficher\n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n    // Définition du texte de l'élément toast comme une représentation JSON de formData\n    toastElement.textContent = formData.map((el)=>JSON.stringify(el));\n    // Attente de 5 secondes, puis suppression de la classe \"show\" de l'élément toast pour le cacher\n    setTimeout(()=>{\n        toastElement.classList.remove(\"show\");\n    }, 5000);\n    // Retourne formData\n    return formData;\n}\nvar // Propriété privée #inputElement qui est un objet HTMLInputElement représentant le champ\n$00b6969b118ecdd2$var$_inputElement = /*#__PURE__*/ new WeakMap();\n// Création de la classe Field\nclass $00b6969b118ecdd2$var$Field {\n    // Méthode pour créer les éléments HTML propres à un champ et les retourner\n    render() {\n        // Création d'un élément <div> avec la classe \"field-container\"\n        const fieldContainer = document.createElement(\"div\");\n        fieldContainer.classList.add(\"field-container\");\n        // Création d'un élément <label> avec le texte du label de l'instance\n        const labelElement = document.createElement(\"label\");\n        labelElement.innerText = this.label;\n        // Attribution des propriétés name et type à l'objet #inputElement\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_inputElement).name = this.name;\n        (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_inputElement).type = this.type;\n        // Ajout des éléments <label> et <input> au <div>\n        fieldContainer.append(labelElement);\n        fieldContainer.append((0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_inputElement));\n        // Retourne le <div> contenant les éléments du champ\n        return fieldContainer;\n    }\n    // Getter pour la propriété value de l'objet #inputElement\n    get value() {\n        return (0, $5c80af232c750ab2$export$5a67b255b80ee4f2)(this, $00b6969b118ecdd2$var$_inputElement).value;\n    }\n    // Constructeur de la classe Field avec un objet 'options' contenant 'name', 'type' et 'label'\n    constructor(options){\n        (0, $308c5c0430b3b5af$export$e235798705076415)(this, $00b6969b118ecdd2$var$_inputElement, {\n            writable: true,\n            value: document.createElement(\"input\")\n        });\n        // Propriétés d'instance name, type et label\n        this.name = options.name;\n        this.type = options.type;\n        this.label = options.label;\n    }\n}\n// Création d'une instance de la classe Form avec le titre \"Signup\"\nconst $00b6969b118ecdd2$var$form = new $00b6969b118ecdd2$var$Form(\"Signup\");\n// Création d'instances de la classe Field avec différentes configurations\nconst $00b6969b118ecdd2$var$email = new $00b6969b118ecdd2$var$Field({\n    name: \"email\",\n    type: \"email\",\n    label: \"email\"\n});\nconst $00b6969b118ecdd2$var$password = new $00b6969b118ecdd2$var$Field({\n    name: \"password\",\n    type: \"password\",\n    label: \"password\"\n});\n// Ajout des champs au formulaire et appel de la méthode render pour afficher le formulaire dans le DOM\n$00b6969b118ecdd2$var$form.addField($00b6969b118ecdd2$var$email).addField($00b6969b118ecdd2$var$password).render();\n\n\n//# sourceMappingURL=index.da6d2546.js.map\n","// Création de la classe Form\nclass Form {\n  // Propriété privée #fields qui contient un tableau d’instances de la classe Field\n  #fields = [];\n  // Propriété privée #formElement qui est un objet HTMLFormElement représentant le formulaire\n  #formElement = document.createElement(\"form\");\n\n  // Constructeur de la classe Form avec un paramètre 'title'\n  constructor(title) {\n    // Propriété 'title' du formulaire\n    this.title = title;\n  }\n\n  // Méthode pour ajouter une instance de Field au tableau #fields\n  addField(field) {\n    // Vérification si 'field' est une instance de la classe Field\n    if (!(field instanceof Field)) {\n      throw new Error(\"You tried to add something that is not a field\");\n    }\n    // Ajout de 'field' au tableau #fields\n    this.#fields.push(field);\n    // Affichage d'un message dans la console\n    console.log(`Added field ${field.name} to form`);\n    // Permet l'enchaînement des méthodes\n    return this;\n  }\n\n  // Méthode pour créer, afficher, insérer dans le DOM et traiter les événements liés au formulaire\n  render() {\n    // Création d'un élément <h1> avec le contenu du titre du formulaire\n    const titleElement = document.createElement(\"h1\");\n    titleElement.textContent = this.title;\n    // Ajout de l'élément <h1> au formulaire\n    this.#formElement.append(titleElement);\n\n    // Pour chaque instance de Field dans le tableau #fields, génération des éléments HTML correspondants\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render();\n      // Ajout des éléments générés au formulaire\n      this.#formElement.append(fieldElement);\n    });\n\n    // Création d'un bouton de type \"submit\" et ajout au formulaire\n    const buttonElement = document.createElement(\"button\");\n    buttonElement.type = \"submit\";\n    buttonElement.textContent = \"Submit\";\n    this.#formElement.append(buttonElement);\n\n    // Ajout d'un écouteur d'événement sur le formulaire pour l'événement \"submit\"\n    // et liaison de la méthode #submit à l'événement tout en maintenant le contexte de la classe (this)\n    this.#formElement.addEventListener(\"submit\", this.#submit.bind(this));\n\n    // Ajout du formulaire complet au DOM (dans le corps du document)\n    document.body.append(this.#formElement);\n  }\n\n  // Méthode privée #submit, callback de l'événement \"submit\" du formulaire\n  #submit(e) {\n    // Empêcher le rechargement de la page lors de la soumission du formulaire\n    e.preventDefault();\n\n    // Collecte des valeurs des champs du formulaire dans un tableau d'objets\n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Recherche de l'élément toast dans le DOM et ajout de la classe \"show\" pour l'afficher\n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Définition du texte de l'élément toast comme une représentation JSON de formData\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Attente de 5 secondes, puis suppression de la classe \"show\" de l'élément toast pour le cacher\n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    // Retourne formData\n    return formData;\n  }\n}\n\n// Création de la classe Field\nclass Field {\n  // Propriété privée #inputElement qui est un objet HTMLInputElement représentant le champ\n  #inputElement = document.createElement(\"input\");\n\n  // Constructeur de la classe Field avec un objet 'options' contenant 'name', 'type' et 'label'\n  constructor(options) {\n    // Propriétés d'instance name, type et label\n    this.name = options.name;\n    this.type = options.type;\n    this.label = options.label;\n  }\n\n  // Méthode pour créer les éléments HTML propres à un champ et les retourner\n  render() {\n    // Création d'un élément <div> avec la classe \"field-container\"\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    // Création d'un élément <label> avec le texte du label de l'instance\n    const labelElement = document.createElement(\"label\");\n    labelElement.innerText = this.label;\n\n    // Attribution des propriétés name et type à l'objet #inputElement\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    // Ajout des éléments <label> et <input> au <div>\n    fieldContainer.append(labelElement);\n    fieldContainer.append(this.#inputElement);\n\n    // Retourne le <div> contenant les éléments du champ\n    return fieldContainer;\n  }\n\n  // Getter pour la propriété value de l'objet #inputElement\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n\n// Création d'une instance de la classe Form avec le titre \"Signup\"\nconst form = new Form(\"Signup\");\n\n// Création d'instances de la classe Field avec différentes configurations\nconst email = new Field({\n  name: \"email\",\n  type: \"email\",\n  label: \"email\"\n});\n\nconst password = new Field({\n  name: \"password\",\n  type: \"password\",\n  label: \"password\"\n});\n\n// Ajout des champs au formulaire et appel de la méthode render pour afficher le formulaire dans le DOM\nform.addField(email).addField(password).render();\n","import { _class_apply_descriptor_get } from \"./_class_apply_descriptor_get.js\";\nimport { _class_extract_field_descriptor } from \"./_class_extract_field_descriptor.js\";\n\nexport function _class_private_field_get(receiver, privateMap) {\n    var descriptor = _class_extract_field_descriptor(receiver, privateMap, \"get\");\n    return _class_apply_descriptor_get(receiver, descriptor);\n}\nexport { _class_private_field_get as _ };\n","export function _class_apply_descriptor_get(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n\n    return descriptor.value;\n}\nexport { _class_apply_descriptor_get as _ };\n","export function _class_extract_field_descriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n\n    return privateMap.get(receiver);\n}\nexport { _class_extract_field_descriptor as _ };\n","import { _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nexport function _class_private_field_init(obj, privateMap, value) {\n    _check_private_redeclaration(obj, privateMap);\n    privateMap.set(obj, value);\n}\nexport { _class_private_field_init as _ };\n","export function _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\nexport { _check_private_redeclaration as _ };\n","export function _class_private_method_get(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n\n    return fn;\n}\nexport { _class_private_method_get as _ };\n","import { _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nexport function _class_private_method_init(obj, privateSet) {\n    _check_private_redeclaration(obj, privateSet);\n    privateSet.add(obj);\n}\nexport { _class_private_method_init as _ };\n"],"names":["$5c80af232c750ab2$export$5a67b255b80ee4f2","receiver","privateMap","descriptor","action","has","TypeError","get","call","value","$790fb9fc00091f9b$export$6b10452b5ac97eba","obj","privateCollection","$308c5c0430b3b5af$export$e235798705076415","set","$00b6969b118ecdd2$var$_fields","WeakMap","$00b6969b118ecdd2$var$_formElement","$00b6969b118ecdd2$var$_submit","WeakSet","$00b6969b118ecdd2$var$submit","e","preventDefault","formData","map","field","name","toastElement","document","querySelector","classList","add","textContent","el","JSON","stringify","setTimeout","remove","$00b6969b118ecdd2$var$_inputElement","$00b6969b118ecdd2$var$Field","render","fieldContainer","createElement","labelElement","innerText","label","type","append","constructor","options","writable","$00b6969b118ecdd2$var$form","addField","Error","push","console","log","titleElement","title","forEach","fieldElement","buttonElement","addEventListener","privateSet","fn","bind","body","$00b6969b118ecdd2$var$email","$00b6969b118ecdd2$var$password"],"version":3,"file":"index.da6d2546.js.map"}